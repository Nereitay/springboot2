多环境开发（yaml版）

YAML中的文档分隔用三个破折号(---)表示，文档的末尾用三个点(...)表示

小结:
    多环境开发需要设置若干种常用环境，例如开发、生产、测试环境
    yaml格式中设置多环境使用—区分环境设置边界
    每种环境的区别在于加载的配置属性不同
    启用某种环境时需要指定启动时使用该环境

多环境开发配置文件书写技巧（一）
    主配置文件中设置公共配置（全局）
    环境分类配置文件中常用于设置冲突属性（局部）
小结:
    可以使用独立配置文件定义环境属性
    独立配置文件便于线上系统维护更新并保障系统安全性

多环境开发独立配置文件书写技巧（二）
    根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件，命名规则如下
    application-devDB.yml
    application-devRedis.yml
    application-devMVC.yml
    使用include属性在激活指定环境的情况下，同时对多个环境进行加载使其生效，多个环境间使用逗号分隔
    注意事项:
        当主环境dev与其他环境有相同属性时，主环境属性生效；其他环境中有相同属性时，最后加载的环境属性生效

    从Spring2.4版开始使用group属性替代include属性，降低了配置书写量
    使用group属性定义多种主环境与子环境的包含关系

    使用group属性，会覆盖 主环境dev (active) 的内容，最后加载的环境属性生效


Maven与SpringBoot多环境兼容
    ①：Maven中设置多环境属性
    ②：SpringBoot中引用Maven属性
    ③：执行Maven打包指令，并在生成的boot打包文件.jar文件中查看对应信息 或者 设置 IDEA进行自动编译

小结：
    当Maven与SpringBoot同时对多环境进行控制时，以Maven为主，SpringBoot使用@…@占位符读取Maven对应的配置属性值
    基于SpringBoot读取Maven配置属性的前提下，如果在Idea下测试工程时pom.xml每次更新需要手动compile方可生效

总结：
    多环境开发（YAML版）
    多环境开发（Properties版）
    Maven与SpringBoot多环境冲突现象解决方案
